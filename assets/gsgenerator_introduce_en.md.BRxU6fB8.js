import{_ as t,c as n,a0 as r,o}from"./chunks/framework.sqaneRz1.js";const g=JSON.parse('{"title":"Generate TS and JS Getters / Setters","description":"","frontmatter":{},"headers":[],"relativePath":"gsgenerator/introduce_en.md","filePath":"gsgenerator/introduce_en.md"}'),s={name:"gsgenerator/introduce_en.md"};function i(a,e,p,c,l,h){return o(),n("div",null,e[0]||(e[0]=[r('<h1 id="generate-ts-and-js-getters-setters" tabindex="-1">Generate TS and JS Getters / Setters <a class="header-anchor" href="#generate-ts-and-js-getters-setters" aria-label="Permalink to &quot;Generate TS and JS Getters / Setters&quot;">​</a></h1><ul><li><a href="https://github.com/qizhiqizhi/WJGSGenerator" target="_blank" rel="noreferrer">GitHub地址</a></li></ul><h2 id="existing-functions" tabindex="-1">Existing functions: <a class="header-anchor" href="#existing-functions" aria-label="Permalink to &quot;Existing functions:&quot;">​</a></h2><p>1.Generate traditional object-oriented set and get methods or ES6 getter and setter functions for TS (TypeScript) and JS (JavaScript).</p><p>2.Can identify whether functions are duplicated and avoid generating functions repeatedly.</p><p>3.Can prompt for the absence of modifiers and the absence of the underscore (&#39;_&#39;).</p><p>4.Can generate functions for a single property, a single file (all classes within the file), and for properties selected in the quick selection box.</p><p>5.Can choose whether comments are needed and whether to use the traditional writing method or the ES6 writing method by modifying the configuration items.</p><h2 id="some-contrasts" tabindex="-1">Some contrasts: <a class="header-anchor" href="#some-contrasts" aria-label="Permalink to &quot;Some contrasts:&quot;">​</a></h2><p>1.TypeScript GetSet:nsertion will still be carried out if the function already exists or part of it already exists; If there is one property that is not standardized, all the code cannot be inserted; Only function code in TypeScript (TS) can be generated.</p><p>functions：Generate the get and set functions for all properties of a class; Generate the get or set functions for all properties of a class.</p><p>2.TypeScript Toolbox:Only properties modified by &quot;private&quot; can be inserted; When inserting functions for all properties, only the first class can be recognized; Only function code in TypeScript (TS) can be generated. The advantage is that the insertion speed of analyzing the code using regular expression matching is faster.</p><p>functions：Generate the get and set functions for all properties of a class;Generate the get or set function for a property;Generate the get and set functions for a property;</p><p>3.Getter Setter Ultimate:The code insertion position is at the end of all classes. If there are multiple classes, manual modification is required.</p><p>functions：Generate the get and set functions in ES6 syntax for the selected properties; Generate the get and set functions in the traditional syntax for the selected properties.</p><p>4.TypeScript&#39;s Getters and Setters Object Oriented Programming Style:Error messages will be generated when the selected content is incomplete; Only function code in TypeScript (TS) can be generated.</p><p>functions：Generate the get and set functions for the selected properties.</p><h2 id="how-to-use" tabindex="-1">How to USE: <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to USE:&quot;">​</a></h2><p>(The usage of JavaScript (JS) is the same as that of TypeScript (TS), so only the usage of TypeScript (TS) will be demonstrated.)</p><p><strong>+ Single property insertion function: Select a property and use generateGetterSetter or use the shortcut key Ctrl + Win + Shift + S.</strong></p><p><strong>For ES6 accessor syntax:</strong></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/19/99c74d0ce40a57b7.gif" alt="img"></p><p><strong>For the traditional object-oriented writing method:</strong></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/19/b701bf964f107e98.gif" alt="img"></p><p><strong>+ File insertion function: Use generateGetterSetterForAll or use the shortcut key Ctrl + Win + Shift + D.</strong></p><p><img src="https://s3.bmp.ovh/imgs/2024/12/19/76da5aa06543865d.gif" alt="img"></p><p><strong>+ Select property to generate function: Use SelectGSGenerate or use the shortcut key Ctrl + Alt + G.</strong>+</p><p><img src="https://s3.bmp.ovh/imgs/2024/12/19/1c97f1db39564636.gif" alt="img"></p><p><strong>+ modify the configuration items</strong></p><p><strong>Whether it is written in ES6</strong></p><p>Change the shortcut keys: After pressing Ctrl +Shift +P, enter &quot;ConfigurationES6&quot; click on &quot;ConfigurationES6&quot;.</p><p><strong>Whether to generate function exegesis</strong></p><p>Change the shortcut keys: After pressing Ctrl +Shift +P, enter &quot;ConfigurationExegesis&quot; click on &quot;ConfigurationExegesis&quot;.</p>',33)]))}const f=t(s,[["render",i]]);export{g as __pageData,f as default};
